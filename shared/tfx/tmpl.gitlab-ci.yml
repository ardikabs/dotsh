image: alpine

stages:
  - validate
  - plan
  - apply

variables:
  AWS_PROFILE: "set the AWS_PROFILE name here"
  TF_BACKEND: "currently the available values are 'aws' and 'google'"
  TF_BACKEND_BUCKET: "set the Terraform Backend S3/GCS Bucket name here"
  TF_BACKEND_DYNAMODB_TABLE: "set the Terraform Backend DynamoDB table name here, if you use S3 as the backend"

.scripts:
  - &setup |-
    TEMPDIR=$(mktemp -d)
    if ! curl -sfL "https://github.com/ardikabs/dotsh/archive/refs/tags/main.zip" -o "${TEMPDIR}"/scripts.zip; then
    cat >&2 <<'EOF'
      ðŸ“Ž Hey there! It looks like an error occurs when trying to download the scripts.

      It is probably an issue either from GitLab or the job is completely missing or unknown.

      Please contact the administrator (@ardikabs) for further details.

      Exiting...
    EOF
    exit 1
    fi

    mkdir -p "${TEMPDIR}/scripts"
    mkdir -p /opt/shared

    unzip -qq -o "${TEMPDIR}"/scripts.zip -d "${TEMPDIR}"/scripts
    mv "${TEMPDIR}"/scripts/lib/* /usr/local/bin/ || true
    mv "${TEMPDIR}"/scripts/shared/* /opt/shared || true

  - &prepare |-
    #-------------------------------------------------------------------------
    # example for AWS, using AWS_PROFILE, set AWS_PROFILE in GitlabCI variables
    # -------------------------------------------------------------------------
    unset AWS_SECRET_ACCESS_KEY
    unset AWS_ACCESS_KEY_ID
    export AWS_METADATA_URL="http://override-ami-instance-profile"
    mkdir -p ~/.aws
    echo -n "$AWS_CREDENTIALS" | base64 -d > ~/.aws/credentials
    echo -n "$AWS_CONFIG" | base64 -d > ~/.aws/config

    #-------------------------------------------------------------------------
    # example for Google, using GOOGLE_APPLICATION_CREDENTIALS, set GOOGLE_APPLICATION_CREDENTIALS in GitlabCI variables
    #-------------------------------------------------------------------------
    echo -n "$TF_SERVICE_ACCOUNT" | base64 -d > /tmp/sa.json

before_script:
  - *setup
  - *prepare
  - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/".insteadOf ssh://git@gitlab.com/
  - git fetch

validate:
  stage: validate
  script:
    - export TF_PREVIOUS_HEAD=$(git rev-parse remotes/origin/master)
    - tfx validate
  except:
    refs:
      - master
      - merge_requests

plan:
  stage: plan
  script:
    - export TF_PREVIOUS_HEAD=$(git rev-parse remotes/origin/master)
    - tfx plan
  only:
    refs:
      - merge_requests
  artifacts:
    paths:
      - .plan/
    expire_in: 1 hrs

apply:
  stage: apply
  script:
    - export TF_PREVIOUS_HEAD=$(git rev-parse remotes/origin/master)
    - tfx apply
  only:
    refs:
      - merge_requests
  when: manual
  allow_failure: false
  dependencies:
    - plan
