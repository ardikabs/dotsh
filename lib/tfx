#!/usr/bin/env bash
set -euo pipefail

# exit code list:
# 2  - unknown argument
# 26 - terraform task failure
# 64 - command line usage error
# 69 - dependency unsatisfied
# 77 - permission denied

toolname=$(basename "${BASH_SOURCE[0]}")
toolversion=v0.1.8

TERRAFORM_VERSION=${TERRAFORM_VERSION:-0.12.26}
TF_BIN=${TF_BIN:-/usr/local/bin/terraform}
TF_PLUGIN_CACHE_DIR=${TF_PLUGIN_CACHE_DIR:-/tmp/terraform/plugin-cache}

ERRORS=()
ARGUMENT=none
ERROR_MARK=none

trap exit_handler EXIT

# shellcheck disable=SC2034
setup_colors() {
  # if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
  # disable checking file descriptor (fd) since this script intended to be run on docker environment
  if [[ -z "${NO_COLOR-}" ]]; then
    NC='\033[0m'
    WHITE='\033[1;97m'
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    LGREEN='\033[1;92m'
    ORANGE='\033[0;33m'
    BLUE='\033[0;34m'
    PURPLE='\033[0;35m'
    CYAN='\033[0;36m'
    YELLOW='\033[1;33m'
    LYELLOW='\033[1;93m'
  else
    NC=''
    WHITE=''
    RED=''
    GREEN=''
    LGREEN=''
    ORANGE=''
    BLUE=''
    PURPLE=''
    CYAN=''
    YELLOW=''
    LYELLOW=''
  fi
}

msg() {
  echo -e "$*" >&2
}

die() {
  local msg=$1
  msg "error: $msg"
  return 64
}

exit_handler() {
  RC=$?
  trap - EXIT

  case $ERROR_MARK in
  dependency)
    for e in "${ERRORS[@]}"; do
      msg "${toolname}: missing ${RED}${e##*/}${NC} command"
    done
    ;;
  runtime)
    msg "${toolname}: abort, caught resources failed on terraform execution:"
    for e in "${ERRORS[@]}"; do
      msg "${PURPLE}❯${NC} ${RED}${e}${NC}"
    done
    ;;
  esac
  exit $RC
}

parse_params() {
  if [[ $# -eq 0 ]]; then
    usage
  fi

  while [[ $# -gt 0 ]]; do
    case $1 in
    -h | --help) usage ;;
    -v | --verbose) set -x ;;
    -nc | --no-color) NO_COLOR=1 ;;
    -?*) die "unknown option '$1'" ;;
    *) break ;;
    esac
    shift
  done

  ARGUMENT=$1
}

command_check() {
  for cmd in "$@"; do
    if type "${cmd}" >/dev/null 2>&1 || [[ -x "${cmd}" ]]; then
      continue
    fi
    ERRORS+=("${cmd}")
  done

  if [ ${#ERRORS[@]} -ne 0 ]; then
    export ERROR_MARK=dependency
    return 69
  fi
}

fetch_terraform_if_not_exist() {
  if ! type terraform >/dev/null 2>&1; then
    wget -q -O /tmp/terraform.zip https://releases.hashicorp.com/terraform/"${TERRAFORM_VERSION}"/terraform_"${TERRAFORM_VERSION}"_linux_amd64.zip
    unzip -qq -o /tmp/terraform.zip -d /tmp/
    rm -rf /tmp/terraform.zip
    mv "/tmp/terraform" "/tmp/terraform_${TERRAFORM_VERSION}"

    chmod +x "/tmp/terraform_${TERRAFORM_VERSION}"

    export TF_BIN="/tmp/terraform_${TERRAFORM_VERSION}"
  fi
}

assigner_check() {
  assigners=$(echo "${TF_ASSIGNERS-}" | base64 -d)

  if ! grep "${GITLAB_USER_LOGIN-}" <<<"${assigners}" >/dev/null; then
    msg "${RED}ABORT!${NC} You are not allowed to run this operation."
    msg "Please contact one of the repository maintainers below:\n"
    msg "${WHITE}${assigners}${NC}"
    return 77
  fi
}

########################################################
# Executor section
########################################################
select_backend() {
  if [ -z "${TF_BACKEND_BUCKET-}" ]; then
    die "Required Terraform backend bucket (\$TF_BACKEND_BUCKET) environment variable is missing"
  fi

  # shellcheck disable=SC2016
  case $1 in
  aws)
    export TF_BACKEND_CONFIG="-backend-config=bucket=$TF_BACKEND_BUCKET \
        -backend-config=key=${TF_BACKEND_PREFIX:+${TF_BACKEND_PREFIX}/}\$TF_BACKEND_STATE \
        ${TF_BACKEND_DYNAMODB_TABLE:+-backend-config=dynamodb_table=$TF_BACKEND_DYNAMODB_TABLE}
      "
    ;;
  google)
    export TF_BACKEND_CONFIG="-backend-config=bucket=$TF_BACKEND_BUCKET \
        -backend-config=prefix=${TF_BACKEND_PREFIX:+${TF_BACKEND_PREFIX}/}\$TF_BACKEND_STATE
      "
    ;;
  esac
}

execute() {
  local basedir
  local target_dirs
  local action
  local destroy

  target_dirs=$1
  action=$2
  destroy=${3-}

  export TF_PLUGIN_CACHE_DIR
  mkdir -p "$TF_PLUGIN_CACHE_DIR"

  basedir="$(git rev-parse --show-toplevel)"

  # Select backend and forming -backend-config arguments for terraform
  select_backend "${TF_BACKEND:-aws}"

  for tfpath in ${target_dirs}; do
    dir_with_files=$(find "${basedir}"/"${tfpath}" -maxdepth 1 -type f 2>/dev/null)
    if [ -n "${dir_with_files}" ]; then
      msg "[${BLUE}START${NC}]: ${WHITE}Starting Terraform task at${NC} ${CYAN}${tfpath}${NC}"

      TF_PLAN_DIR="${basedir}/.plan/${tfpath}"
      mkdir -p "$TF_PLAN_DIR"

      # it will keep running even there is error in one of terraform task
      # but resulting non-zero exit code for the whole script
      (
        export TF_PLAN_FILE="${TF_PLAN_DIR%\/}/default.tfplan"
        export TF_BACKEND_STATE="${tfpath%\/}/.terraform"

        TF_INIT="${TF_BIN} init"
        TF_VALIDATE="${TF_BIN} validate"
        TF_PLAN="${TF_BIN} plan -out ${TF_PLAN_FILE}"
        TF_APPLY="${TF_BIN} apply ${TF_PLAN_FILE}"

        cd "${basedir}"/"${tfpath}"
        sleep 1

        case ${action} in
        validate)
          eval "${TF_INIT} -backend=false"
          eval "${TF_VALIDATE}"
          ;;
        plan)
          eval "${TF_INIT} ${TF_BACKEND_CONFIG}"
          eval "${TF_PLAN} ${destroy:+-destroy}"
          ;;
        apply)
          eval "${TF_INIT} ${TF_BACKEND_CONFIG}"
          eval "${TF_APPLY}"
          ;;
        esac
      ) || ERRORS+=("${tfpath}")

      msg "[${BLUE}DONE${NC}]: ${WHITE}Terraform task at ${CYAN}$tfpath\n${NC} is completed\n${NC}"
    fi
  done
}

########################################################
# Runner section
########################################################
runner() {
  if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    die "current directory is not a git repository (${repo_dir-})"
  fi

  local repo
  local action
  local added_dirs
  local modified_dirs
  local deleted_dirs

  action=$1

  case $action in
  validate | plan) ;;
  apply) assigner_check ;;
  *)
    msg "${toolname}: unknown terraform operation ${action}"
    return 2
    ;;
  esac

  repo="$(basename "$(git rev-parse --show-toplevel)")"

  # Git commit variables
  CURRENT_HEAD="$(git rev-parse HEAD)"
  PREVIOUS_HEAD="${TF_PREVIOUS_HEAD:-$(git rev-parse HEAD^1)}"

  # Perform scanning into repository for any changes in one of the following states
  # > Adding
  # > Modified
  # > Deleted

  msg "${RED}"
  msg "############################################################"
  msg "                 STARTING TERRAFORM TASK                    "
  msg "############################################################"
  msg "${NC}"

  added_dirs=$(git diff "${PREVIOUS_HEAD}"..."${CURRENT_HEAD}" --dirstat-by-file --diff-filter=A -- '*.tf' '*.tfvars' '*.json' | awk '{ print $2 }')
  modified_dirs=$(git diff "${PREVIOUS_HEAD}"..."${CURRENT_HEAD}" --dirstat-by-file --diff-filter=M -- '*.tf' '*.tfvars' '*.json' | awk '{ print $2 }')
  deleted_dirs=$(git diff "${PREVIOUS_HEAD}"..."${CURRENT_HEAD}" --dirstat-by-file --diff-filter=D -- '*.tf' '*.tfvars' '*.json' | awk '{ print $2 }')

  # execute: Terraform execution to all recent added directories
  if [ -n "${added_dirs}" ]; then
    execute "${added_dirs[@]}" "${action}"
  fi

  # execute: Terraform execution to all recent modified directories
  if [ -n "${modified_dirs}" ]; then
    execute "${modified_dirs[@]}" "${action}"
  fi

  # execute: Terraform execution to all recent deleted directories
  # checkout to previous commit on head, run destroy operation
  # then back to commit on current head
  if [ -n "${deleted_dirs}" ]; then
    git checkout "${PREVIOUS_HEAD}" >/dev/null 2>&1
    execute "${deleted_dirs[@]}" "${action}" "destroy"
    git checkout "${CURRENT_HEAD}" >/dev/null 2>&1
  fi

  msg "${PURPLE}"
  msg "############################################################"
  msg "                 END OF TERRAFORM TASK                      "
  msg "############################################################"
  msg "${NC}"

  if [ ${#ERRORS[@]} -ne 0 ]; then
    export ERROR_MARK=runtime
    return 26
  fi

  msg "${LGREEN}"
  msg "#####################################################"
  msg "                 SUMMARY REPORT                      "
  msg "#####################################################"
  msg "${NC}"

  msg "Repository: ${YELLOW}${repo}${NC}\n"

  msg "${YELLOW}Added${NC} Resources \t: $(wc -w <<<"${added_dirs}" | sed -e 's/^[[:space:]]*//') resources"
  msg "${GREEN}Modified${NC} Resources \t: $(wc -w <<<"${modified_dirs}" | sed -e 's/^[[:space:]]*//') resources"
  msg "${RED}Deleted${NC} Resources \t: $(wc -w <<<"${deleted_dirs}" | sed -e 's/^[[:space:]]*//') resources"
  msg ""

  msg "Terraform Resources List:\n"

  for path in $added_dirs; do
    printf >&2 "%-24b %b\n" "[${YELLOW}ADDED${NC}]" "Resource ${YELLOW}${path}${NC}"
  done

  for path in $modified_dirs; do
    printf >&2 "%-24b %b\n" "[${GREEN}MODIFIED${NC}]" "Resource ${GREEN}${path}${NC}"
  done

  for path in $deleted_dirs; do
    printf >&2 "%-24b %b\n" "[${RED}DELETED${NC}]" "Resource ${RED}${path}${NC}"
  done
}

########################################################
# Main section
########################################################
show_version() {
  msg "${toolname} version ${YELLOW}${toolversion}${NC}"
  msg "Terraform version ${YELLOW}${TERRAFORM_VERSION}${NC}"
}

show_figlet() {
  cat <<EOF
 _    __
| |_ / _|_  __
| __| |_\ \/ /
| |_|  _|>  <
 \__|_| /_/\_\

EOF
}

usage() {
  cat <<EOF
$(show_figlet)

is a thin wrapper script for Terraform to work with multiple directories of terraform files.

It uses the "git-diff" triple-dot method to identify your Terraform tasks within your local git repository.
It then categorizes these tasks based on their status:

* Added
* Modified/Renamed
* Deleted

Usage:
  $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-nc] COMMAND

Available Commands:
  validate     : do terraform validate with more power
  plan         : do terraform plan with more power
  apply        : do terraform apply with more power
  version      : show ${toolname} version

Available Options:
  -h,  --help        : Print this help and exit
  -v,  --verbose     : Print script debug info
  -nc, --no-color    : Disables colour output

Available Environment Variables:
  \$TERRAFORM_VERSION         : is a terraform version to be used, default to Terraform version 0.12.26 (terraformless-build)
  \$TF_BIN                    : is a terraform binary path location, MUST be executable otherwise resulting non-zero status code. Default to "${TF_BIN}".
  \$TF_PREVIOUS_HEAD          : is a previous head commit to be compared with current branch head commit. Default to "HEAD^1", consider this as required.
  \$TF_BACKEND                : is a terraform backend provider. Default to "aws".
  \$TF_BACKEND_BUCKET         : is a terraform backend bucket. (required)
  \$TF_BACKEND_PREFIX         : is a terraform backend prefix for the terraform state.
  \$TF_BACKEND_DYNAMODB_TABLE : is a terraform backend dynamodb table as terraform-lock storage.
  \$TF_ASSIGNERS              : is a base64-encoded string that contains a list of assigners (separated by newline) that able to execute ${toolname}.
  \$TF_PLUGIN_CACHE_DIR       : is a terraform plugin cache dir based on official docs. Default to "${TF_PLUGIN_CACHE_DIR}".
EOF
  exit
}

main() {
  parse_params "$@"
  setup_colors

  command_check "git"
  fetch_terraform_if_not_exist

  case $ARGUMENT in
  validate) runner "validate" ;;
  plan) runner "plan" ;;
  apply) runner "apply" ;;
  version) show_version ;;
  *)
    msg "${toolname}: unknown command ${YELLOW}'$ARGUMENT'${NC}. See '${toolname} --help'"
    return 2
    ;;
  esac
}

main "$@"
